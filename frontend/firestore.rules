rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user has the 'baker' role
    // Assumes the user's role is stored in a 'role' field in their user document
    function isBaker() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'baker';
    }

    // Helper function to check if the user has the 'admin' role
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User documents
    match /users/{userId} {
      // Allow authenticated users to read their own profile
      allow read: if isAuthenticated() && userId == request.auth.uid;
      // Allow authenticated users to create/update their own profile
      // Admins can update any user profile (e.g., to change roles)
      allow write: if (isAuthenticated() && userId == request.auth.uid) || isAdmin();
      // Allow bakers and admins to read user profiles
      allow read: if isBaker() || isAdmin();
      
      // Cart subcollection - users can only access their own carts
      match /carts/{cartId} {
        allow read, write: if isAuthenticated() && userId == request.auth.uid;
      }
    }

    // Order documents
    match /orders/{orderId} {
      // Allow authenticated users to read their own orders
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Allow authenticated users to create orders
      allow create: if isAuthenticated();
      // Allow bakers to read all orders
      allow read: if isBaker();
      // Allow bakers to update specific fields in orders (e.g., status)
      // This rule needs to be more specific about which fields can be updated by a baker
      // For now, allowing update if baker, but this should be refined.
      allow update: if isBaker();
    }

    // Cakes collection
    match /cakes/{cakeId} {
      allow read: if true; // Public read access for cakes
      allow create: if isBaker() || isAdmin(); // Bakers and Admins can create cakes
      // Bakers can update/delete their own cakes, Admins can update/delete any cake
      allow update, delete: if isAdmin() || (isBaker() && resource.data.bakerId == request.auth.uid);
    }

    // Testimonials collection (assuming public read, authenticated create)
    match /testimonials/{testimonialId} {
      allow read: if true;
      allow create: if isAuthenticated();
      // Add update/delete rules if needed for admin/baker
      // allow update, delete: if isAdmin() || isBaker(); // Example
    }

    // FAQs collection (assuming public read)
    match /faqs/{faqId} {
      allow read: if true;
      // Add write rules if needed for admin/baker
      // allow create, update, delete: if isAdmin() || isBaker(); // Example
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
